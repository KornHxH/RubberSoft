//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RubberSoft.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RubberSoftEntities : DbContext
    {
        public RubberSoftEntities()
            : base("name=RubberSoftEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<rpt_BuyByDate_Result> rpt_BuyByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyByDate_Result>("rpt_BuyByDate", startDateParameter, endDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_BuyByDate_2_Result> rpt_BuyByDate_2(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyByDate_2_Result>("rpt_BuyByDate_2", startDateParameter, endDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_BuyByMonth_Result> rpt_BuyByMonth(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyByMonth_Result>("rpt_BuyByMonth", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_BuyByMonth_2_Result> rpt_BuyByMonth_2(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyByMonth_2_Result>("rpt_BuyByMonth_2", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_BuyByYear_Result> rpt_BuyByYear(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyByYear_Result>("rpt_BuyByYear", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_BuyByYear_2_Result> rpt_BuyByYear_2(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyByYear_2_Result>("rpt_BuyByYear_2", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_BuyWeightBalance_ByDate_Result> rpt_BuyWeightBalance_ByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyWeightBalance_ByDate_Result>("rpt_BuyWeightBalance_ByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rpt_BuyWeightBalance_ByMonth_Result> rpt_BuyWeightBalance_ByMonth(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyWeightBalance_ByMonth_Result>("rpt_BuyWeightBalance_ByMonth", startDateParameter);
        }
    
        public virtual ObjectResult<rpt_BuyWeightBalance_ByYear_Result> rpt_BuyWeightBalance_ByYear(Nullable<System.DateTime> startDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BuyWeightBalance_ByYear_Result>("rpt_BuyWeightBalance_ByYear", startDateParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByDate_Result> rpt_SaleByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByDate_Result>("rpt_SaleByDate", startDateParameter, endDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByDate_1_Result> rpt_SaleByDate_1(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByDate_1_Result>("rpt_SaleByDate_1", startDateParameter, endDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByDate_2_Result> rpt_SaleByDate_2(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByDate_2_Result>("rpt_SaleByDate_2", startDateParameter, endDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByMonth_Result> rpt_SaleByMonth(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByMonth_Result>("rpt_SaleByMonth", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByMonth_1_Result> rpt_SaleByMonth_1(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByMonth_1_Result>("rpt_SaleByMonth_1", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByMonth_2_Result> rpt_SaleByMonth_2(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByMonth_2_Result>("rpt_SaleByMonth_2", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByYear_Result> rpt_SaleByYear(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByYear_Result>("rpt_SaleByYear", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByYear_1_Result> rpt_SaleByYear_1(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByYear_1_Result>("rpt_SaleByYear_1", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<rpt_SaleByYear_2_Result> rpt_SaleByYear_2(Nullable<System.DateTime> startDate, Nullable<int> productTypeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SaleByYear_2_Result>("rpt_SaleByYear_2", startDateParameter, productTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddBuy(string buyNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> buyDate, Nullable<decimal> beginBalance, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing, Nullable<bool> isFinalze, Nullable<int> insertBy, Nullable<int> terminnalId)
        {
            var buyNumberParameter = buyNumber != null ?
                new ObjectParameter("BuyNumber", buyNumber) :
                new ObjectParameter("BuyNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(decimal));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            var isFinalzeParameter = isFinalze.HasValue ?
                new ObjectParameter("IsFinalze", isFinalze) :
                new ObjectParameter("IsFinalze", typeof(bool));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            var terminnalIdParameter = terminnalId.HasValue ?
                new ObjectParameter("TerminnalId", terminnalId) :
                new ObjectParameter("TerminnalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddBuy", buyNumberParameter, customerIdParameter, customerNameParameter, buyDateParameter, beginBalanceParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter, isFinalzeParameter, insertByParameter, terminnalIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddBuyProduct(Nullable<int> buyId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> insertBy)
        {
            var buyIdParameter = buyId.HasValue ?
                new ObjectParameter("BuyId", buyId) :
                new ObjectParameter("BuyId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddBuyProduct", buyIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddCustomer(Nullable<int> customerTypeId, Nullable<int> customerGroupId, string customerCode, string customerName, string customerAddress, string licensePlate, string phone, Nullable<bool> isDefault, Nullable<int> insertBy)
        {
            var customerTypeIdParameter = customerTypeId.HasValue ?
                new ObjectParameter("CustomerTypeId", customerTypeId) :
                new ObjectParameter("CustomerTypeId", typeof(int));
    
            var customerGroupIdParameter = customerGroupId.HasValue ?
                new ObjectParameter("CustomerGroupId", customerGroupId) :
                new ObjectParameter("CustomerGroupId", typeof(int));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var licensePlateParameter = licensePlate != null ?
                new ObjectParameter("LicensePlate", licensePlate) :
                new ObjectParameter("LicensePlate", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddCustomer", customerTypeIdParameter, customerGroupIdParameter, customerCodeParameter, customerNameParameter, customerAddressParameter, licensePlateParameter, phoneParameter, isDefaultParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddCustomerPrice(string priceName, Nullable<int> customerId, Nullable<System.DateTime> saleDate, Nullable<decimal> salePriceAdvance, Nullable<double> weightAmount, Nullable<decimal> deliveryPrice, Nullable<bool> isDefault)
        {
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var salePriceAdvanceParameter = salePriceAdvance.HasValue ?
                new ObjectParameter("SalePriceAdvance", salePriceAdvance) :
                new ObjectParameter("SalePriceAdvance", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(double));
    
            var deliveryPriceParameter = deliveryPrice.HasValue ?
                new ObjectParameter("DeliveryPrice", deliveryPrice) :
                new ObjectParameter("DeliveryPrice", typeof(decimal));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddCustomerPrice", priceNameParameter, customerIdParameter, saleDateParameter, salePriceAdvanceParameter, weightAmountParameter, deliveryPriceParameter, isDefaultParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddCustomerTypes(string customerTypeName, Nullable<int> insertBy)
        {
            var customerTypeNameParameter = customerTypeName != null ?
                new ObjectParameter("CustomerTypeName", customerTypeName) :
                new ObjectParameter("CustomerTypeName", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddCustomerTypes", customerTypeNameParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddLog(Nullable<int> logTypeId, string logName, string logDetail, Nullable<int> userId, string iPMachine, string machineName)
        {
            var logTypeIdParameter = logTypeId.HasValue ?
                new ObjectParameter("LogTypeId", logTypeId) :
                new ObjectParameter("LogTypeId", typeof(int));
    
            var logNameParameter = logName != null ?
                new ObjectParameter("LogName", logName) :
                new ObjectParameter("LogName", typeof(string));
    
            var logDetailParameter = logDetail != null ?
                new ObjectParameter("LogDetail", logDetail) :
                new ObjectParameter("LogDetail", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var iPMachineParameter = iPMachine != null ?
                new ObjectParameter("IPMachine", iPMachine) :
                new ObjectParameter("IPMachine", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddLog", logTypeIdParameter, logNameParameter, logDetailParameter, userIdParameter, iPMachineParameter, machineNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddOption(Nullable<int> terminalId, string terminalName, string optionName, string optionValue, Nullable<System.DateTime> dateValue, Nullable<System.TimeSpan> timeValue)
        {
            var terminalIdParameter = terminalId.HasValue ?
                new ObjectParameter("TerminalId", terminalId) :
                new ObjectParameter("TerminalId", typeof(int));
    
            var terminalNameParameter = terminalName != null ?
                new ObjectParameter("TerminalName", terminalName) :
                new ObjectParameter("TerminalName", typeof(string));
    
            var optionNameParameter = optionName != null ?
                new ObjectParameter("OptionName", optionName) :
                new ObjectParameter("OptionName", typeof(string));
    
            var optionValueParameter = optionValue != null ?
                new ObjectParameter("OptionValue", optionValue) :
                new ObjectParameter("OptionValue", typeof(string));
    
            var dateValueParameter = dateValue.HasValue ?
                new ObjectParameter("DateValue", dateValue) :
                new ObjectParameter("DateValue", typeof(System.DateTime));
    
            var timeValueParameter = timeValue.HasValue ?
                new ObjectParameter("TimeValue", timeValue) :
                new ObjectParameter("TimeValue", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddOption", terminalIdParameter, terminalNameParameter, optionNameParameter, optionValueParameter, dateValueParameter, timeValueParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddOutStandingBalance(Nullable<int> customerId, Nullable<decimal> beginDebt, Nullable<decimal> outstandingDebt, Nullable<int> lastLogId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var beginDebtParameter = beginDebt.HasValue ?
                new ObjectParameter("BeginDebt", beginDebt) :
                new ObjectParameter("BeginDebt", typeof(decimal));
    
            var outstandingDebtParameter = outstandingDebt.HasValue ?
                new ObjectParameter("OutstandingDebt", outstandingDebt) :
                new ObjectParameter("OutstandingDebt", typeof(decimal));
    
            var lastLogIdParameter = lastLogId.HasValue ?
                new ObjectParameter("LastLogId", lastLogId) :
                new ObjectParameter("LastLogId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddOutStandingBalance", customerIdParameter, beginDebtParameter, outstandingDebtParameter, lastLogIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddOutStandingLog(Nullable<int> customerId, Nullable<decimal> beginOutstandingDebt, Nullable<decimal> outstandingDebt, Nullable<int> refId, Nullable<int> outStandingStatus, Nullable<int> logTypeId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var beginOutstandingDebtParameter = beginOutstandingDebt.HasValue ?
                new ObjectParameter("BeginOutstandingDebt", beginOutstandingDebt) :
                new ObjectParameter("BeginOutstandingDebt", typeof(decimal));
    
            var outstandingDebtParameter = outstandingDebt.HasValue ?
                new ObjectParameter("OutstandingDebt", outstandingDebt) :
                new ObjectParameter("OutstandingDebt", typeof(decimal));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(int));
    
            var outStandingStatusParameter = outStandingStatus.HasValue ?
                new ObjectParameter("OutStandingStatus", outStandingStatus) :
                new ObjectParameter("OutStandingStatus", typeof(int));
    
            var logTypeIdParameter = logTypeId.HasValue ?
                new ObjectParameter("LogTypeId", logTypeId) :
                new ObjectParameter("LogTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddOutStandingLog", customerIdParameter, beginOutstandingDebtParameter, outstandingDebtParameter, refIdParameter, outStandingStatusParameter, logTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddSale(string saleNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> saleDate, Nullable<decimal> beginBalance, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, Nullable<bool> isFinalze, Nullable<int> insertBy, Nullable<int> terminnalId)
        {
            var saleNumberParameter = saleNumber != null ?
                new ObjectParameter("SaleNumber", saleNumber) :
                new ObjectParameter("SaleNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(decimal));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var isFinalzeParameter = isFinalze.HasValue ?
                new ObjectParameter("IsFinalze", isFinalze) :
                new ObjectParameter("IsFinalze", typeof(bool));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            var terminnalIdParameter = terminnalId.HasValue ?
                new ObjectParameter("TerminnalId", terminnalId) :
                new ObjectParameter("TerminnalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddSale", saleNumberParameter, customerIdParameter, customerNameParameter, saleDateParameter, beginBalanceParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, isFinalzeParameter, insertByParameter, terminnalIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddSaleProduct(Nullable<int> saleId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> insertBy)
        {
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddSaleProduct", saleIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddSaveBuyProduct(Nullable<int> buyId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> insertBy)
        {
            var buyIdParameter = buyId.HasValue ?
                new ObjectParameter("BuyId", buyId) :
                new ObjectParameter("BuyId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddSaveBuyProduct", buyIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddSaveSale(string saleNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> saleDate, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing, Nullable<int> insertBy)
        {
            var saleNumberParameter = saleNumber != null ?
                new ObjectParameter("SaleNumber", saleNumber) :
                new ObjectParameter("SaleNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddSaveSale", saleNumberParameter, customerIdParameter, customerNameParameter, saleDateParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddSaveSaleProduct(Nullable<int> saleId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> insertBy)
        {
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddSaveSaleProduct", saleIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddTerminal(string terminalName, string iPMachine, string machineName, Nullable<bool> active)
        {
            var terminalNameParameter = terminalName != null ?
                new ObjectParameter("TerminalName", terminalName) :
                new ObjectParameter("TerminalName", typeof(string));
    
            var iPMachineParameter = iPMachine != null ?
                new ObjectParameter("IPMachine", iPMachine) :
                new ObjectParameter("IPMachine", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddTerminal", terminalNameParameter, iPMachineParameter, machineNameParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddTransactionLog(Nullable<int> customerId, Nullable<int> priceId, Nullable<decimal> beginAmt, Nullable<decimal> weightAmount_Raw, Nullable<decimal> weightBalanceAmt, Nullable<int> refId, Nullable<int> logTypeId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var beginAmtParameter = beginAmt.HasValue ?
                new ObjectParameter("BeginAmt", beginAmt) :
                new ObjectParameter("BeginAmt", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var weightBalanceAmtParameter = weightBalanceAmt.HasValue ?
                new ObjectParameter("WeightBalanceAmt", weightBalanceAmt) :
                new ObjectParameter("WeightBalanceAmt", typeof(decimal));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(int));
    
            var logTypeIdParameter = logTypeId.HasValue ?
                new ObjectParameter("LogTypeId", logTypeId) :
                new ObjectParameter("LogTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddTransactionLog", customerIdParameter, priceIdParameter, beginAmtParameter, weightAmount_RawParameter, weightBalanceAmtParameter, refIdParameter, logTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddUsers(Nullable<int> userTypeId, string userName, string password, string firstName, string lastName, Nullable<bool> active)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddUsers", userTypeIdParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, activeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddWeightBalance(Nullable<int> customerId, Nullable<int> priceId, Nullable<decimal> beginBalanceAmt, Nullable<decimal> weightBalanceAmt, Nullable<int> lastLogId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var beginBalanceAmtParameter = beginBalanceAmt.HasValue ?
                new ObjectParameter("BeginBalanceAmt", beginBalanceAmt) :
                new ObjectParameter("BeginBalanceAmt", typeof(decimal));
    
            var weightBalanceAmtParameter = weightBalanceAmt.HasValue ?
                new ObjectParameter("WeightBalanceAmt", weightBalanceAmt) :
                new ObjectParameter("WeightBalanceAmt", typeof(decimal));
    
            var lastLogIdParameter = lastLogId.HasValue ?
                new ObjectParameter("LastLogId", lastLogId) :
                new ObjectParameter("LastLogId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddWeightBalance", customerIdParameter, priceIdParameter, beginBalanceAmtParameter, weightBalanceAmtParameter, lastLogIdParameter);
        }
    
        public virtual int spt_DeleteCustomer(Nullable<int> customerId, Nullable<int> deleteBy)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var deleteByParameter = deleteBy.HasValue ?
                new ObjectParameter("DeleteBy", deleteBy) :
                new ObjectParameter("DeleteBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_DeleteCustomer", customerIdParameter, deleteByParameter);
        }
    
        public virtual int spt_DeleteCustomerPrice(Nullable<int> priceId)
        {
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_DeleteCustomerPrice", priceIdParameter);
        }
    
        public virtual ObjectResult<spt_GetBuy_Result> spt_GetBuy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetBuy_Result>("spt_GetBuy");
        }
    
        public virtual ObjectResult<spt_GetBuyBill_Result> spt_GetBuyBill(Nullable<int> buyId)
        {
            var buyIdParameter = buyId.HasValue ?
                new ObjectParameter("BuyId", buyId) :
                new ObjectParameter("BuyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetBuyBill_Result>("spt_GetBuyBill", buyIdParameter);
        }
    
        public virtual ObjectResult<string> spt_GetBuyNumber(Nullable<System.DateTime> buyDate)
        {
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spt_GetBuyNumber", buyDateParameter);
        }
    
        public virtual ObjectResult<spt_GetBuyProduct_Result> spt_GetBuyProduct(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetBuyProduct_Result>("spt_GetBuyProduct", activeParameter);
        }
    
        public virtual ObjectResult<spt_GetBuyWeightBalance_Result> spt_GetBuyWeightBalance(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetBuyWeightBalance_Result>("spt_GetBuyWeightBalance", customerIdParameter);
        }
    
        public virtual ObjectResult<spt_GetCustomer_Result> spt_GetCustomer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetCustomer_Result>("spt_GetCustomer");
        }
    
        public virtual int spt_GetCustomerPrice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_GetCustomerPrice");
        }
    
        public virtual ObjectResult<spt_GetCustomerTypes_Result> spt_GetCustomerTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetCustomerTypes_Result>("spt_GetCustomerTypes");
        }
    
        public virtual ObjectResult<spt_GetLogDetails_Result> spt_GetLogDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetLogDetails_Result>("spt_GetLogDetails");
        }
    
        public virtual ObjectResult<spt_GetOptions_Result> spt_GetOptions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetOptions_Result>("spt_GetOptions");
        }
    
        public virtual ObjectResult<spt_GetOutStandingBalance_Result> spt_GetOutStandingBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetOutStandingBalance_Result>("spt_GetOutStandingBalance");
        }
    
        public virtual ObjectResult<spt_GetOutStandingLog_Result> spt_GetOutStandingLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetOutStandingLog_Result>("spt_GetOutStandingLog");
        }
    
        public virtual ObjectResult<spt_GetRoles_Result> spt_GetRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetRoles_Result>("spt_GetRoles");
        }
    
        public virtual ObjectResult<spt_GetSale_Result> spt_GetSale()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetSale_Result>("spt_GetSale");
        }
    
        public virtual ObjectResult<string> spt_GetSaleNumber(Nullable<System.DateTime> saleDate)
        {
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spt_GetSaleNumber", saleDateParameter);
        }
    
        public virtual ObjectResult<spt_GetSaleProduct_Result> spt_GetSaleProduct(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetSaleProduct_Result>("spt_GetSaleProduct", activeParameter);
        }
    
        public virtual ObjectResult<spt_GetSaleWeightBalance_Result> spt_GetSaleWeightBalance(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetSaleWeightBalance_Result>("spt_GetSaleWeightBalance", customerIdParameter);
        }
    
        public virtual ObjectResult<string> spt_GetSaveBuyNumber(Nullable<System.DateTime> buyDate)
        {
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spt_GetSaveBuyNumber", buyDateParameter);
        }
    
        public virtual ObjectResult<spt_GetSaveBuyProduct_Result> spt_GetSaveBuyProduct(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetSaveBuyProduct_Result>("spt_GetSaveBuyProduct", activeParameter);
        }
    
        public virtual ObjectResult<spt_GetSaveSale_Result> spt_GetSaveSale()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetSaveSale_Result>("spt_GetSaveSale");
        }
    
        public virtual ObjectResult<string> spt_GetSaveSaleNumber(Nullable<System.DateTime> saleDate)
        {
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spt_GetSaveSaleNumber", saleDateParameter);
        }
    
        public virtual ObjectResult<spt_GetSaveSaleProduct_Result> spt_GetSaveSaleProduct(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetSaveSaleProduct_Result>("spt_GetSaveSaleProduct", activeParameter);
        }
    
        public virtual ObjectResult<spt_GetTerminal_Result> spt_GetTerminal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetTerminal_Result>("spt_GetTerminal");
        }
    
        public virtual ObjectResult<spt_GetTransactionLog_Result> spt_GetTransactionLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetTransactionLog_Result>("spt_GetTransactionLog");
        }
    
        public virtual ObjectResult<spt_GetUsers_Result> spt_GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetUsers_Result>("spt_GetUsers");
        }
    
        public virtual ObjectResult<spt_GetWeightBalance_Result> spt_GetWeightBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetWeightBalance_Result>("spt_GetWeightBalance");
        }
    
        public virtual int spt_UpdateBuy(Nullable<int> buyId, string buyNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> buyDate, Nullable<decimal> beginBalance, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing, Nullable<bool> isFinalze, Nullable<int> updateBy)
        {
            var buyIdParameter = buyId.HasValue ?
                new ObjectParameter("BuyId", buyId) :
                new ObjectParameter("BuyId", typeof(int));
    
            var buyNumberParameter = buyNumber != null ?
                new ObjectParameter("BuyNumber", buyNumber) :
                new ObjectParameter("BuyNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(decimal));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            var isFinalzeParameter = isFinalze.HasValue ?
                new ObjectParameter("IsFinalze", isFinalze) :
                new ObjectParameter("IsFinalze", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateBuy", buyIdParameter, buyNumberParameter, customerIdParameter, customerNameParameter, buyDateParameter, beginBalanceParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter, isFinalzeParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateBuyProduct(Nullable<int> buyProductId, Nullable<int> buyId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> updateBy)
        {
            var buyProductIdParameter = buyProductId.HasValue ?
                new ObjectParameter("BuyProductId", buyProductId) :
                new ObjectParameter("BuyProductId", typeof(int));
    
            var buyIdParameter = buyId.HasValue ?
                new ObjectParameter("BuyId", buyId) :
                new ObjectParameter("BuyId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateBuyProduct", buyProductIdParameter, buyIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateCustomer(Nullable<int> customerId, Nullable<int> customerTypeId, Nullable<int> customerGroupId, string customerCode, string customerName, string customerAddress, string licensePlate, string phone, Nullable<bool> isDefault, Nullable<int> updateBy)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerTypeIdParameter = customerTypeId.HasValue ?
                new ObjectParameter("CustomerTypeId", customerTypeId) :
                new ObjectParameter("CustomerTypeId", typeof(int));
    
            var customerGroupIdParameter = customerGroupId.HasValue ?
                new ObjectParameter("CustomerGroupId", customerGroupId) :
                new ObjectParameter("CustomerGroupId", typeof(int));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var licensePlateParameter = licensePlate != null ?
                new ObjectParameter("LicensePlate", licensePlate) :
                new ObjectParameter("LicensePlate", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateCustomer", customerIdParameter, customerTypeIdParameter, customerGroupIdParameter, customerCodeParameter, customerNameParameter, customerAddressParameter, licensePlateParameter, phoneParameter, isDefaultParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateCustomerPrice(Nullable<int> priceId, string priceName, Nullable<int> customerId, Nullable<System.DateTime> saleDate, Nullable<decimal> salePriceAdvance, Nullable<double> weightAmount, Nullable<decimal> deliveryPrice, Nullable<bool> isDefault)
        {
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var salePriceAdvanceParameter = salePriceAdvance.HasValue ?
                new ObjectParameter("SalePriceAdvance", salePriceAdvance) :
                new ObjectParameter("SalePriceAdvance", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(double));
    
            var deliveryPriceParameter = deliveryPrice.HasValue ?
                new ObjectParameter("DeliveryPrice", deliveryPrice) :
                new ObjectParameter("DeliveryPrice", typeof(decimal));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateCustomerPrice", priceIdParameter, priceNameParameter, customerIdParameter, saleDateParameter, salePriceAdvanceParameter, weightAmountParameter, deliveryPriceParameter, isDefaultParameter);
        }
    
        public virtual int spt_UpdateCustomerTypes(Nullable<int> customerTypeId, string customerTypeName, Nullable<int> updateBy)
        {
            var customerTypeIdParameter = customerTypeId.HasValue ?
                new ObjectParameter("CustomerTypeId", customerTypeId) :
                new ObjectParameter("CustomerTypeId", typeof(int));
    
            var customerTypeNameParameter = customerTypeName != null ?
                new ObjectParameter("CustomerTypeName", customerTypeName) :
                new ObjectParameter("CustomerTypeName", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateCustomerTypes", customerTypeIdParameter, customerTypeNameParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateOptions(Nullable<int> optionID, Nullable<int> terminalId, string terminalName, string optionName, string optionValue, Nullable<System.DateTime> dateValue, Nullable<System.TimeSpan> timeValue)
        {
            var optionIDParameter = optionID.HasValue ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(int));
    
            var terminalIdParameter = terminalId.HasValue ?
                new ObjectParameter("TerminalId", terminalId) :
                new ObjectParameter("TerminalId", typeof(int));
    
            var terminalNameParameter = terminalName != null ?
                new ObjectParameter("TerminalName", terminalName) :
                new ObjectParameter("TerminalName", typeof(string));
    
            var optionNameParameter = optionName != null ?
                new ObjectParameter("OptionName", optionName) :
                new ObjectParameter("OptionName", typeof(string));
    
            var optionValueParameter = optionValue != null ?
                new ObjectParameter("OptionValue", optionValue) :
                new ObjectParameter("OptionValue", typeof(string));
    
            var dateValueParameter = dateValue.HasValue ?
                new ObjectParameter("DateValue", dateValue) :
                new ObjectParameter("DateValue", typeof(System.DateTime));
    
            var timeValueParameter = timeValue.HasValue ?
                new ObjectParameter("TimeValue", timeValue) :
                new ObjectParameter("TimeValue", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateOptions", optionIDParameter, terminalIdParameter, terminalNameParameter, optionNameParameter, optionValueParameter, dateValueParameter, timeValueParameter);
        }
    
        public virtual int spt_UpdateOutStandingBalance(Nullable<int> customerId, Nullable<decimal> beginDebt, Nullable<decimal> outstandingDebt, Nullable<int> lastLogId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var beginDebtParameter = beginDebt.HasValue ?
                new ObjectParameter("BeginDebt", beginDebt) :
                new ObjectParameter("BeginDebt", typeof(decimal));
    
            var outstandingDebtParameter = outstandingDebt.HasValue ?
                new ObjectParameter("OutstandingDebt", outstandingDebt) :
                new ObjectParameter("OutstandingDebt", typeof(decimal));
    
            var lastLogIdParameter = lastLogId.HasValue ?
                new ObjectParameter("LastLogId", lastLogId) :
                new ObjectParameter("LastLogId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateOutStandingBalance", customerIdParameter, beginDebtParameter, outstandingDebtParameter, lastLogIdParameter);
        }
    
        public virtual int spt_UpdateSale(Nullable<int> saleId, string saleNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> saleDate, Nullable<decimal> beginBalance, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, Nullable<bool> isFinalze, Nullable<int> updateBy)
        {
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(int));
    
            var saleNumberParameter = saleNumber != null ?
                new ObjectParameter("SaleNumber", saleNumber) :
                new ObjectParameter("SaleNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var beginBalanceParameter = beginBalance.HasValue ?
                new ObjectParameter("BeginBalance", beginBalance) :
                new ObjectParameter("BeginBalance", typeof(decimal));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var isFinalzeParameter = isFinalze.HasValue ?
                new ObjectParameter("IsFinalze", isFinalze) :
                new ObjectParameter("IsFinalze", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateSale", saleIdParameter, saleNumberParameter, customerIdParameter, customerNameParameter, saleDateParameter, beginBalanceParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, isFinalzeParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateSaleProduct(Nullable<int> saleProductId, Nullable<int> saleId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> updateBy)
        {
            var saleProductIdParameter = saleProductId.HasValue ?
                new ObjectParameter("SaleProductId", saleProductId) :
                new ObjectParameter("SaleProductId", typeof(int));
    
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateSaleProduct", saleProductIdParameter, saleIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateSaveBuyProduct(Nullable<int> buyProductId, Nullable<int> buyId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> updateBy)
        {
            var buyProductIdParameter = buyProductId.HasValue ?
                new ObjectParameter("BuyProductId", buyProductId) :
                new ObjectParameter("BuyProductId", typeof(int));
    
            var buyIdParameter = buyId.HasValue ?
                new ObjectParameter("BuyId", buyId) :
                new ObjectParameter("BuyId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateSaveBuyProduct", buyProductIdParameter, buyIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateSaveSale(Nullable<int> saveSaleId, string saleNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> saleDate, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing)
        {
            var saveSaleIdParameter = saveSaleId.HasValue ?
                new ObjectParameter("SaveSaleId", saveSaleId) :
                new ObjectParameter("SaveSaleId", typeof(int));
    
            var saleNumberParameter = saleNumber != null ?
                new ObjectParameter("SaleNumber", saleNumber) :
                new ObjectParameter("SaleNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateSaveSale", saveSaleIdParameter, saleNumberParameter, customerIdParameter, customerNameParameter, saleDateParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter);
        }
    
        public virtual int spt_UpdateSaveSaleProduct(Nullable<int> saleProductId, Nullable<int> saleId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> updateBy)
        {
            var saleProductIdParameter = saleProductId.HasValue ?
                new ObjectParameter("SaleProductId", saleProductId) :
                new ObjectParameter("SaleProductId", typeof(int));
    
            var saleIdParameter = saleId.HasValue ?
                new ObjectParameter("SaleId", saleId) :
                new ObjectParameter("SaleId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateSaveSaleProduct", saleProductIdParameter, saleIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, updateByParameter);
        }
    
        public virtual int spt_UpdateTerminal(Nullable<int> terminalId, string iPMachine, Nullable<bool> active)
        {
            var terminalIdParameter = terminalId.HasValue ?
                new ObjectParameter("TerminalId", terminalId) :
                new ObjectParameter("TerminalId", typeof(int));
    
            var iPMachineParameter = iPMachine != null ?
                new ObjectParameter("IPMachine", iPMachine) :
                new ObjectParameter("IPMachine", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateTerminal", terminalIdParameter, iPMachineParameter, activeParameter);
        }
    
        public virtual int spt_UpdateUsers(Nullable<int> userId, Nullable<int> userTypeId, string userName, string password, string firstName, string lastName, Nullable<bool> active)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateUsers", userIdParameter, userTypeIdParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, activeParameter);
        }
    
        public virtual int spt_UpdateWeightBalance(Nullable<int> customerId, Nullable<int> priceId, Nullable<decimal> beginBalanceAmt, Nullable<decimal> weightBalanceAmt, Nullable<int> lastLogId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var beginBalanceAmtParameter = beginBalanceAmt.HasValue ?
                new ObjectParameter("BeginBalanceAmt", beginBalanceAmt) :
                new ObjectParameter("BeginBalanceAmt", typeof(decimal));
    
            var weightBalanceAmtParameter = weightBalanceAmt.HasValue ?
                new ObjectParameter("WeightBalanceAmt", weightBalanceAmt) :
                new ObjectParameter("WeightBalanceAmt", typeof(decimal));
    
            var lastLogIdParameter = lastLogId.HasValue ?
                new ObjectParameter("LastLogId", lastLogId) :
                new ObjectParameter("LastLogId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateWeightBalance", customerIdParameter, priceIdParameter, beginBalanceAmtParameter, weightBalanceAmtParameter, lastLogIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddConsignment(string buyNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> buyDate, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing, Nullable<int> insertBy)
        {
            var buyNumberParameter = buyNumber != null ?
                new ObjectParameter("BuyNumber", buyNumber) :
                new ObjectParameter("BuyNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddConsignment", buyNumberParameter, customerIdParameter, customerNameParameter, buyDateParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter, insertByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddConsignmentProduct(Nullable<int> consignmentId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> insertBy)
        {
            var consignmentIdParameter = consignmentId.HasValue ?
                new ObjectParameter("ConsignmentId", consignmentId) :
                new ObjectParameter("ConsignmentId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddConsignmentProduct", consignmentIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, insertByParameter);
        }
    
        public virtual ObjectResult<spt_GetConsignment_Result> spt_GetConsignment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetConsignment_Result>("spt_GetConsignment");
        }
    
        public virtual ObjectResult<string> spt_GetConsignmentNumber(Nullable<System.DateTime> buyDate)
        {
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spt_GetConsignmentNumber", buyDateParameter);
        }
    
        public virtual ObjectResult<spt_GetConsignmentProduct_Result> spt_GetConsignmentProduct(Nullable<bool> active)
        {
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetConsignmentProduct_Result>("spt_GetConsignmentProduct", activeParameter);
        }
    
        public virtual int spt_UpdateConsignment(Nullable<int> consignmentId, string buyNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> buyDate, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing)
        {
            var consignmentIdParameter = consignmentId.HasValue ?
                new ObjectParameter("ConsignmentId", consignmentId) :
                new ObjectParameter("ConsignmentId", typeof(int));
    
            var buyNumberParameter = buyNumber != null ?
                new ObjectParameter("BuyNumber", buyNumber) :
                new ObjectParameter("BuyNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateConsignment", consignmentIdParameter, buyNumberParameter, customerIdParameter, customerNameParameter, buyDateParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter);
        }
    
        public virtual int spt_UpdateConsignmentProduct(Nullable<int> consignmentProductId, Nullable<int> consignmentId, Nullable<int> priceId, Nullable<int> itemPriceId, string priceName, Nullable<decimal> percentage, Nullable<decimal> weightAmount, Nullable<decimal> weightAmount_Plate, Nullable<decimal> drc, Nullable<decimal> totalPrice_Smoke, Nullable<decimal> weightAmount_Raw, Nullable<decimal> totalPrice_Raw, Nullable<decimal> calRubber, Nullable<decimal> totalPrice, string remark, Nullable<int> updateBy)
        {
            var consignmentProductIdParameter = consignmentProductId.HasValue ?
                new ObjectParameter("ConsignmentProductId", consignmentProductId) :
                new ObjectParameter("ConsignmentProductId", typeof(int));
    
            var consignmentIdParameter = consignmentId.HasValue ?
                new ObjectParameter("ConsignmentId", consignmentId) :
                new ObjectParameter("ConsignmentId", typeof(int));
    
            var priceIdParameter = priceId.HasValue ?
                new ObjectParameter("PriceId", priceId) :
                new ObjectParameter("PriceId", typeof(int));
    
            var itemPriceIdParameter = itemPriceId.HasValue ?
                new ObjectParameter("ItemPriceId", itemPriceId) :
                new ObjectParameter("ItemPriceId", typeof(int));
    
            var priceNameParameter = priceName != null ?
                new ObjectParameter("PriceName", priceName) :
                new ObjectParameter("PriceName", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var weightAmountParameter = weightAmount.HasValue ?
                new ObjectParameter("WeightAmount", weightAmount) :
                new ObjectParameter("WeightAmount", typeof(decimal));
    
            var weightAmount_PlateParameter = weightAmount_Plate.HasValue ?
                new ObjectParameter("WeightAmount_Plate", weightAmount_Plate) :
                new ObjectParameter("WeightAmount_Plate", typeof(decimal));
    
            var drcParameter = drc.HasValue ?
                new ObjectParameter("Drc", drc) :
                new ObjectParameter("Drc", typeof(decimal));
    
            var totalPrice_SmokeParameter = totalPrice_Smoke.HasValue ?
                new ObjectParameter("TotalPrice_Smoke", totalPrice_Smoke) :
                new ObjectParameter("TotalPrice_Smoke", typeof(decimal));
    
            var weightAmount_RawParameter = weightAmount_Raw.HasValue ?
                new ObjectParameter("WeightAmount_Raw", weightAmount_Raw) :
                new ObjectParameter("WeightAmount_Raw", typeof(decimal));
    
            var totalPrice_RawParameter = totalPrice_Raw.HasValue ?
                new ObjectParameter("TotalPrice_Raw", totalPrice_Raw) :
                new ObjectParameter("TotalPrice_Raw", typeof(decimal));
    
            var calRubberParameter = calRubber.HasValue ?
                new ObjectParameter("CalRubber", calRubber) :
                new ObjectParameter("CalRubber", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateConsignmentProduct", consignmentProductIdParameter, consignmentIdParameter, priceIdParameter, itemPriceIdParameter, priceNameParameter, percentageParameter, weightAmountParameter, weightAmount_PlateParameter, drcParameter, totalPrice_SmokeParameter, weightAmount_RawParameter, totalPrice_RawParameter, calRubberParameter, totalPriceParameter, remarkParameter, updateByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spt_AddSaveBuy(string buyNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> buyDate, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing, Nullable<int> insertBy, Nullable<int> typeSave)
        {
            var buyNumberParameter = buyNumber != null ?
                new ObjectParameter("BuyNumber", buyNumber) :
                new ObjectParameter("BuyNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            var insertByParameter = insertBy.HasValue ?
                new ObjectParameter("InsertBy", insertBy) :
                new ObjectParameter("InsertBy", typeof(int));
    
            var typeSaveParameter = typeSave.HasValue ?
                new ObjectParameter("TypeSave", typeSave) :
                new ObjectParameter("TypeSave", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spt_AddSaveBuy", buyNumberParameter, customerIdParameter, customerNameParameter, buyDateParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter, insertByParameter, typeSaveParameter);
        }
    
        public virtual ObjectResult<spt_GetSaveBuy_Result> spt_GetSaveBuy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spt_GetSaveBuy_Result>("spt_GetSaveBuy");
        }
    
        public virtual int spt_UpdateSaveBuy(Nullable<int> saveBuyId, string buyNumber, Nullable<int> customerId, string customerName, Nullable<System.DateTime> buyDate, Nullable<decimal> subTotal, Nullable<decimal> downValue, Nullable<decimal> netTotal, Nullable<decimal> setOffValue, Nullable<decimal> valueBalance, Nullable<int> productTypeId, string productUsing, Nullable<int> typeSave)
        {
            var saveBuyIdParameter = saveBuyId.HasValue ?
                new ObjectParameter("SaveBuyId", saveBuyId) :
                new ObjectParameter("SaveBuyId", typeof(int));
    
            var buyNumberParameter = buyNumber != null ?
                new ObjectParameter("BuyNumber", buyNumber) :
                new ObjectParameter("BuyNumber", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var buyDateParameter = buyDate.HasValue ?
                new ObjectParameter("BuyDate", buyDate) :
                new ObjectParameter("BuyDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var downValueParameter = downValue.HasValue ?
                new ObjectParameter("DownValue", downValue) :
                new ObjectParameter("DownValue", typeof(decimal));
    
            var netTotalParameter = netTotal.HasValue ?
                new ObjectParameter("NetTotal", netTotal) :
                new ObjectParameter("NetTotal", typeof(decimal));
    
            var setOffValueParameter = setOffValue.HasValue ?
                new ObjectParameter("SetOffValue", setOffValue) :
                new ObjectParameter("SetOffValue", typeof(decimal));
    
            var valueBalanceParameter = valueBalance.HasValue ?
                new ObjectParameter("ValueBalance", valueBalance) :
                new ObjectParameter("ValueBalance", typeof(decimal));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productUsingParameter = productUsing != null ?
                new ObjectParameter("ProductUsing", productUsing) :
                new ObjectParameter("ProductUsing", typeof(string));
    
            var typeSaveParameter = typeSave.HasValue ?
                new ObjectParameter("TypeSave", typeSave) :
                new ObjectParameter("TypeSave", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spt_UpdateSaveBuy", saveBuyIdParameter, buyNumberParameter, customerIdParameter, customerNameParameter, buyDateParameter, subTotalParameter, downValueParameter, netTotalParameter, setOffValueParameter, valueBalanceParameter, productTypeIdParameter, productUsingParameter, typeSaveParameter);
        }
    }
}
